type Token @entity {
  id: ID!
  tokenID: BigInt!
  tokenURI: String!
  ipfsURI: TokenMetadata
  updatedAtTimestamp: BigInt!
  owner: User!
}

type TokenMetadata @entity {
  id: ID!
  image: String!
  name: String!
  tribe: String!
}

type User @entity {
  id: ID!
  tokens: [Token!]! @derivedFrom(field: "owner")
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContractURIUpdated @entity(immutable: true) {
  id: Bytes!
  prevURI: String! # string
  newURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DefaultRoyalty @entity(immutable: true) {
  id: Bytes!
  newRoyaltyRecipient: Bytes! # address
  newRoyaltyBps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PrimarySaleRecipientUpdated @entity(immutable: true) {
  id: Bytes!
  recipient: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestExecuted @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  signer: Bytes! # address
  _req_validityStartTimestamp: BigInt! # uint128
  _req_validityEndTimestamp: BigInt! # uint128
  _req_uid: Bytes! # bytes32
  _req_data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoyaltyForToken @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  royaltyRecipient: Bytes! # address
  royaltyBps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenURIRevealed @entity(immutable: true) {
  id: Bytes!
  index: BigInt! # uint256
  revealedURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensClaimed @entity(immutable: true) {
  id: Bytes!
  claimer: Bytes! # address
  receiver: Bytes! # address
  startTokenId: BigInt! # uint256
  quantityClaimed: BigInt! # uint256
  tiersInPriority: [String!]! # string[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensLazyMinted @entity(immutable: true) {
  id: Bytes!
  tier: String! # string
  startTokenId: BigInt! # uint256
  endTokenId: BigInt! # uint256
  baseURI: String! # string
  encryptedBaseURI: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
